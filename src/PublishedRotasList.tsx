import { useState } from "react";
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";
import { RotaView } from "./RotaView";

export function PublishedRotasList() {
  const [viewingWeekStart, setViewingWeekStart] = useState<string | null>(null);
  // Fetch all rotas
  const rotas = useQuery(api.rotas.listRotas) || [];

  // Filter for published rotas only
  const publishedRotas = rotas.filter((rota: any) => rota.status === "published");
  
  // Group published rotas by week start date (Monday)
  const publishedRotasByWeek = publishedRotas.reduce((groups: Record<string, any[]>, rota: any) => {
    const weekStart = getWeekStartDate(rota.date);
    if (!groups[weekStart]) {
      groups[weekStart] = [];
    }
    groups[weekStart].push(rota);
    return groups;
  }, {});
  
  // Get unique weeks for display in the table
  const uniqueWeeks = Object.keys(publishedRotasByWeek).sort((a, b) => 
    new Date(b).getTime() - new Date(a).getTime()
  );
  
  // Helper function to get Monday date for any date in the week
  function getWeekStartDate(dateStr: string): string {
    const date = new Date(dateStr);
    const day = date.getDay() || 7; // Get day of week (0 = Sunday, 1-6 = Monday-Saturday)
    if (day !== 1) { // If not Monday
      date.setHours(-24 * (day - 1)); // Go back to Monday
    }
    return date.toISOString().split('T')[0];
  }

  // All rotas for the selected week
  const viewingWeekRotas = viewingWeekStart ? publishedRotasByWeek[viewingWeekStart] || [] : [];
  
  // Only show the rota view if we have selected a week to view
  if (viewingWeekStart && viewingWeekRotas.length > 0) {
    // Get the first rota to display the date info
    const firstRota = viewingWeekRotas[0];
    // Find all assignments across all rotas for the week
    const allAssignments = viewingWeekRotas.flatMap(rota => 
      rota.assignments.map((a: any) => ({ ...a, date: a.date || rota.date }))
    );
    
    return (
      <div className="w-full max-w-5xl mx-auto mt-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-semibold">Rota for week starting {viewingWeekStart}</h2>
          <button
            className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
            onClick={() => setViewingWeekStart(null)}
          >
            Close
          </button>
        </div>
        {/* Pass the first rota ID for reference and all assignments for the week */}
        <RotaView rotaId={firstRota._id} readOnly />
      </div>
    );
  }

  return (
    <div className="w-full max-w-3xl mx-auto mt-8">
      <h2 className="text-2xl font-semibold mb-4 text-center">Published Rotas</h2>
      {uniqueWeeks.length === 0 ? (
        <div className="text-gray-500 text-center">No published rotas available.</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white border border-gray-200 rounded-lg shadow">
            <thead>
              <tr>
                <th className="px-4 py-2 border-b">Week Starting</th>
                <th className="px-4 py-2 border-b">Generated By</th>
                <th className="px-4 py-2 border-b">Published At</th>
                <th className="px-4 py-2 border-b">Actions</th>
              </tr>
            </thead>
            <tbody>
              {uniqueWeeks.map((weekStartDate: string) => {
                // Use the first rota in the week for metadata
                const firstRotaInWeek = publishedRotasByWeek[weekStartDate][0];
                return (
                  <tr key={weekStartDate} className="hover:bg-gray-50">
                    <td className="px-4 py-2 border-b text-center">{weekStartDate}</td>
                    <td className="px-4 py-2 border-b text-center">{firstRotaInWeek.generatedBy}</td>
                    <td className="px-4 py-2 border-b text-center">{firstRotaInWeek.generatedAt ? new Date(firstRotaInWeek.generatedAt).toLocaleDateString() : ""}</td>
                    <td className="px-4 py-2 border-b text-center">
                      <span
                        className="text-blue-600 hover:underline cursor-pointer"
                        onClick={() => setViewingWeekStart(weekStartDate)}
                      >
                        View
                      </span>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}
